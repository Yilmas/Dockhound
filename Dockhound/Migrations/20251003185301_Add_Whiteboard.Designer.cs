// <auto-generated />
using System;
using Dockhound.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Dockhound.Migrations
{
    [DbContext(typeof(DockhoundContext))]
    [Migration("20251003185301_Add_Whiteboard")]
    partial class Add_Whiteboard
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Dockhound.Logs.LogError", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Context")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Env")
                        .HasColumnType("int");

                    b.Property<string>("ExceptionType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("Timestamp");

                    b.ToTable("LogErrors");
                });

            modelBuilder.Entity("Dockhound.Logs.LogEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Env")
                        .HasColumnType("int");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("UserId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Updated");

                    b.ToTable("LogEvents");
                });

            modelBuilder.Entity("Dockhound.Models.Guild", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime?>("CreatedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuildId");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Dockhound.Models.GuildSettings", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<int>("SchemaVersion")
                        .HasColumnType("int");

                    b.HasKey("GuildId");

                    b.ToTable("GuildSettings");
                });

            modelBuilder.Entity("Dockhound.Models.GuildSettingsHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ChangedAtUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("ChangedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("GuildSettingsHistories");
                });

            modelBuilder.Entity("Dockhound.Models.Whiteboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<decimal>("CreatedById")
                        .HasColumnType("decimal(20,0)");

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<bool>("IsArchived")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<decimal>("MessageId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<byte>("Mode")
                        .HasColumnType("tinyint");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.ToTable("Whiteboards", (string)null);
                });

            modelBuilder.Entity("Dockhound.Models.WhiteboardRole", b =>
                {
                    b.Property<long>("WhiteboardId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("RoleId")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("WhiteboardId", "RoleId");

                    b.ToTable("WhiteboardRoles", (string)null);
                });

            modelBuilder.Entity("Dockhound.Models.WhiteboardVersion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EditDistance")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditedUtc")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("EditorId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<int>("NewLength")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentChanged")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("PrevLength")
                        .HasColumnType("int");

                    b.Property<int>("VersionIndex")
                        .HasColumnType("int");

                    b.Property<long>("WhiteboardId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WhiteboardId", "VersionIndex")
                        .IsUnique();

                    b.ToTable("WhiteboardVersions", (string)null);
                });

            modelBuilder.Entity("Dockhound.Models.GuildSettings", b =>
                {
                    b.HasOne("Dockhound.Models.Guild", "Guild")
                        .WithOne("Settings")
                        .HasForeignKey("Dockhound.Models.GuildSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Dockhound.Models.WhiteboardRole", b =>
                {
                    b.HasOne("Dockhound.Models.Whiteboard", "Whiteboard")
                        .WithMany("Roles")
                        .HasForeignKey("WhiteboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Whiteboard");
                });

            modelBuilder.Entity("Dockhound.Models.WhiteboardVersion", b =>
                {
                    b.HasOne("Dockhound.Models.Whiteboard", "Whiteboard")
                        .WithMany("Versions")
                        .HasForeignKey("WhiteboardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Whiteboard");
                });

            modelBuilder.Entity("Dockhound.Models.Guild", b =>
                {
                    b.Navigation("Settings");
                });

            modelBuilder.Entity("Dockhound.Models.Whiteboard", b =>
                {
                    b.Navigation("Roles");

                    b.Navigation("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
